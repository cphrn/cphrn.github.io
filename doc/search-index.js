var N = null;var searchIndex = {};
searchIndex["monocypher"]={"doc":"Monocypher is a cryptographic library.","items":[[0,"hashing","monocypher","",N,N],[0,"blake2b","monocypher::hashing","Blake2b hash function",N,N],[3,"Context","monocypher::hashing::blake2b","",N,N],[5,"easy","","Simple function to hash the input data.",N,N],[5,"general","","Function to hash the input data with an additional key.",N,N],[11,"new","","Initializes a new context with the given key.",0,N],[11,"update","","Updates the context with the given data.",0,N],[11,"finalize","","Finalizes the hash and returns it.",0,N],[0,"hchacha20","monocypher::hashing","HChacha20 special purpose hashing function",N,N],[5,"easy","monocypher::hashing::hchacha20","Not-so-cryptographic hashing function. Use blak2b.",N,N],[0,"aead","monocypher","Authenticated encryption",N,N],[0,"lock","monocypher::aead","Authenticated encryption w/o additional data",N,N],[3,"Context","monocypher::aead::lock","",N,N],[5,"easy","","Encrypt and authenticate plaintext data.",N,N],[5,"aead","","Encrypt and authenticate plaintext with additional data.",N,N],[11,"new","","",1,N],[11,"auth_ad","","",1,N],[11,"update","","",1,N],[11,"finalize","","",1,N],[0,"unlock","monocypher::aead","Authenticated decryption w/o additional data",N,N],[3,"Context","monocypher::aead::unlock","",N,N],[5,"easy","","Decrypt encrypted data.",N,N],[5,"aead","","Decrypt ciphertext with additional data.",N,N],[11,"new","","",2,N],[11,"auth_ad","","",2,N],[11,"auth_message","","",2,N],[11,"update","","",2,N],[11,"finalize","","",2,N],[0,"password","monocypher","",N,N],[0,"argon2i","monocypher::password","Argon2i key derivation function",N,N],[5,"easy","monocypher::password::argon2i","Simple function to derive a key from a password.",N,N],[5,"general","","Function to derive a key from a password with additional data.",N,N],[0,"pubkey","monocypher","",N,N],[0,"sign","monocypher::pubkey","Incremental public key signatures",N,N],[3,"Context","monocypher::pubkey::sign","",N,N],[5,"public_key","","Computes the public key of the specified secret key.",N,N],[5,"sign","","Signs a message with secret_key. The public key is optional, and will be recomputed if not provided. This recomputation doubles the execution time.",N,N],[11,"new","","",3,N],[11,"update","","",3,N],[11,"finalize","","",3,N],[11,"begin_second_pass","","",3,[[["self"]]]],[0,"check","monocypher::pubkey","Public key signature functions",N,N],[3,"Context","monocypher::pubkey::check","",N,N],[5,"check","","",N,N],[11,"new","","",4,N],[11,"update","","",4,N],[11,"finalize","","",4,[[["self"]],["result",["string"]]]],[0,"utils","monocypher","Util functions for constant time comparison and memory wiping.",N,N],[5,"verify","monocypher::utils","Constant time comparison of two equal sized buffers.",N,N],[5,"wipe","","Clears a memory region.",N,N],[0,"poly1305","monocypher","Poly1305 is a one-time message authentication code.",N,N],[3,"Context","monocypher::poly1305","",N,N],[5,"auth","","Produces a message authentication code for the given message and authentication key.",N,N],[11,"new","","Initializes a new context with the given key.",5,N],[11,"update","","Authenticates the message chunk by chunk.",5,N],[11,"finalize","","Produces the message authentication code.",5,N],[0,"key_exchange","monocypher","Elliptic Curve Diffie-Hellman key exchange",N,N],[5,"shared","monocypher::key_exchange","Computes a shared key with your secret key and their public key.",N,N],[5,"public","","Deterministically computes the public key from a random secret key.",N,N],[0,"chacha20","monocypher","Chacha20 encryption functions",N,N],[3,"Context","monocypher::chacha20","",N,N],[11,"new","","Initialises a new context with the given key and nonce. Uses an 8-byte nonce, which is too small to be selected at random. Use a counter.",6,N],[11,"new_x","","Initialises a new context with the given key and nonce. Uses a 24-byte nonce, which is big enough to be selected at random. Use your operating system to generate cryptographic secure random numbers. Read the about random number generators in the documentation",6,N],[11,"encrypt","","Encrypts the given plaintext.",6,N],[11,"decrypt","","Decrypts the given ciphertext.",6,N],[11,"stream","","Same as encrypt but with plaintext beeing NULL. Usefull as a non cryptographic user space random number generator.",6,N],[11,"chacha20_set_ctr","","Resets the internal counter of the context to the given number. Resuming the encryption will use the stream at the block number. May be used to en/decrypt part of a long message. Can also be used to implement AEAD constructions like the ones explained in RFC 7539.",6,[[["self"],["u64"]]]],[11,"from","monocypher::hashing::blake2b","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","monocypher::aead::lock","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","monocypher::aead::unlock","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","monocypher::pubkey::sign","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","monocypher::pubkey::check","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","monocypher::poly1305","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","monocypher::chacha20","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]]],"paths":[[3,"Context"],[3,"Context"],[3,"Context"],[3,"Context"],[3,"Context"],[3,"Context"],[3,"Context"]]};
initSearch(searchIndex);
